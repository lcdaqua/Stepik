public class Inspector implements MailService {

    public static final String WEAPONS = "weapons";
    public static final String BANNED_SUBSTANCE = "banned substance";

    @Override
    public Sendable processMail(Sendable mail) {

        if (mail instanceof MailPackage) {
            String contentOfPackage = ((MailPackage)mail).getContent().getContent();
            if (contentOfPackage.contains("stones")) {
  //              throw new StolenPackageException("Discovered the theft from the parcel!");
  //          } else if (contentOfPackage.contains(WEAPONS) | contentOfPackage.contains(BANNED_SUBSTANCE)) {
  //          throw new IllegalPackageException("In the package discovered forbidden content.");
          }
        }
        return mail;
    }
}

public class Spy implements MailService {

    private final Logger logger;
    public static final String AUSTIN_POWERS = "Austin Powers";

    public Spy (Logger logger) {

        this.logger = logger;
        this.logger.setLevel(Level.INFO);
        ConsoleHandler consoleHandler = new ConsoleHandler();
        consoleHandler.setLevel(Level.INFO);
        consoleHandler.setFormatter(new SimpleFormatter());
        this.logger.addHandler(consoleHandler);
    }

    @Override
    public Sendable processMail(Sendable mail) {

        if (mail instanceof MailMessage) {
            if (mail.getFrom().equals(AUSTIN_POWERS) | mail.getTo().equals(AUSTIN_POWERS)) {
                logger.log(Level.WARNING,"Detected target mail correspondence: from {0} to {1} \"{2}\"",
                        new Object[] {mail.getFrom(),
                                      mail.getTo(),
                                      ((MailMessage) mail).getMessage()});
            } else {
                logger.log(Level.INFO, "Usual correspondence: from {0} to {1}",
                        new Object[] {mail.getFrom(),
                                      mail.getTo()});
            }
        }
        return mail;
    }
}

public class Thief implements MailService {

    final int minCostPackage;
    int stolenValue;

    public Thief(final int minCostPackage) {

        this.minCostPackage = minCostPackage;
        this.stolenValue = 0;

    }

    @Override
    public Sendable processMail(Sendable mail) {

        if (mail instanceof MailPackage) {
            int priceOfPackage = ((MailPackage) mail).getContent().getPrice();
            if (priceOfPackage >= minCostPackage) {
                stolenValue += priceOfPackage;
                return new MailPackage(mail.getFrom(), mail.getTo(), new Package("stones instead of " +
                        ((MailPackage) mail).getContent().getContent(), 0));
            }
        }

        return mail;
    }

    int getStolenValue() {
        return stolenValue;
    }
}

public class UntrustworthyMailWorker implements MailService {

    public final MailService unrealMailServices[];
    public final RealMailService realMailService;

    public UntrustworthyMailWorker(MailService unrealMailServices[]) {

        this.unrealMailServices = unrealMailServices;
        realMailService = new RealMailService();

    }

    public RealMailService getRealMailService() {

        return realMailService;

    }

    @Override
    public Sendable processMail(Sendable mail) {

        for (MailService unrealMailService : unrealMailServices) {
            mail = unrealMailService.processMail(mail);
        }

        return realMailService.processMail(mail);
    }
}
